{"version":3,"sources":["utils/conversion.tsx","utils/api.ts","components/CurrencyRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["changeRateFrom","response","state","target","rateFrom","amountTo","amountFrom","rates","rateTo","generateApiURL","base","process","CurrencyRow","props","InputGroup","className","data-testid","testidPrefix","FormControl","value","amount","type","min","onChange","handleAmountChange","DropdownButton","as","Append","variant","title","rate","Object","keys","map","distinctRate","Dropdown","Item","onClick","handleRateClick","active","App","useState","ratesResponse","setRatesResponse","selectedRates","setSelectedRates","isError","setError","isLoading","setLoading","getRates","a","fetch","then","res","json","success","console","log","useEffect","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d01e5788.chunk.js","sourcesContent":["export type Response = {\n  success: boolean;\n  timestamp: number;\n  base: string;\n  date: string;\n  rates: Rates;\n};\n\nexport type Rates = {\n  [key: string]: number;\n};\n\nexport type State = {\n  amountFrom: number;\n  amountTo: number;\n  rateFrom: string;\n  rateTo: string;\n};\n\n// Changes amount from(from input) and amount to(calculation).\nexport const changeAmountFrom = (\n  response: Response,\n  state: State,\n  value: number\n) => {\n  return {\n    ...state,\n    amountFrom: value,\n    amountTo: value * response.rates[state.rateTo],\n  };\n};\n\n// Changes amount from(calculation) and amount to(from input).\nexport const changeAmountTo = (\n  response: Response,\n  state: State,\n  value: number\n) => {\n  return {\n    ...state,\n    amountFrom: value / response.rates[state.rateTo],\n    amountTo: value,\n  };\n};\n\n// Takes a new response according to the rate from, changes rate from(with dropdown select) and amount to(calculation)\nexport const changeRateFrom = (\n  response: Response,\n  state: State,\n  target: string\n) => {\n  return {\n    ...state,\n    rateFrom: target,\n    amountTo: state.amountFrom * response.rates[state.rateTo],\n  };\n};\n\n// Changes rate to(with dropdown select) and amount to(calculation).\nexport const changeRateTo = (\n  response: Response,\n  state: State,\n  target: string\n) => {\n  return {\n    ...state,\n    rateTo: target,\n    amountTo: state.amountFrom * response.rates[target],\n  };\n};\n","export const generateApiURL = (base: string) => {\n  return `${process.env.REACT_APP_API_URL}?access_key=${process.env.REACT_APP_API_ACCESS_KEY}&base=${base}`;\n};\n","import {\n  InputGroup,\n  FormControl,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\nimport { Rates } from \"../utils/conversion\";\nimport './CurrencyRow.scss'\nexport type RowType = {\n  testidPrefix: string;\n  amount: number;\n  handleAmountChange: any;\n  handleRateClick: any;\n  distinctRate: string;\n  rate: string;\n  rates: Rates;\n};\n\nexport const CurrencyRow = (props: RowType) => {\n  return (\n    <InputGroup\n      className=\"p-2\"\n      data-testid={`${props.testidPrefix}-currency-row`}\n    >\n      <FormControl\n        className=\"text-light bg-dark\"\n        data-testid={`${props.testidPrefix}-currency-row-input`}\n        value={props.amount}\n        type=\"number\"\n        min=\"0\"\n        onChange={props.handleAmountChange}\n      />\n      <DropdownButton\n        data-testid={`${props.testidPrefix}-currency-row-dropdown`}\n        as={InputGroup.Append}\n        variant=\"secondary\"\n        title={props.rate}\n      >\n        {Object.keys(props.rates).map((rate) => {\n          if (rate === props.distinctRate) return null;\n          return (\n            <Dropdown.Item\n              data-testid={`${props.testidPrefix}-currency-row-dropdown-item`}\n              onClick={() => props.handleRateClick(rate)}\n              active={props.rate === rate}\n              key={rate}\n            >\n              {rate}\n            </Dropdown.Item>\n          );\n        })}\n      </DropdownButton>\n    </InputGroup>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport {\n  changeAmountFrom,\n  changeAmountTo,\n  changeRateFrom,\n  changeRateTo,\n  Response,\n  State,\n} from \"./utils/conversion\";\nimport { generateApiURL } from \"./utils/api\";\nimport { CurrencyRow } from \"./components/CurrencyRow\";\n\nconst App = () => {\n  // All rates from API\n  const [ratesResponse, setRatesResponse] = useState({} as Response);\n\n  // Selected state\n  const [selectedRates, setSelectedRates] = useState({\n    amountFrom: 0,\n    amountTo: 0,\n    rateFrom: \"EUR\",\n    rateTo: \"TRY\",\n  } as State);\n  const [isError, setError] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n\n  const getRates = async (base: string) => {\n    setLoading(true);\n    try {\n      const response = await fetch(generateApiURL(base)).then((res) =>\n        res.json()\n      );\n      if (!response.success) {\n        setError(true);\n        return;\n      }\n      setRatesResponse(response);\n      setSelectedRates(changeRateFrom(response, selectedRates, base));\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setError(true);\n    }\n  };\n\n  const handleAmountFromChange = (e: any) => {\n    setSelectedRates(\n      changeAmountFrom(ratesResponse, selectedRates, e.target.value)\n    );\n  };\n\n  const handleAmountToChange = (e: any) => {\n    setSelectedRates(\n      changeAmountTo(ratesResponse, selectedRates, e.target.value)\n    );\n  };\n\n  const handleRateFrom = (rate: string) => {\n    // Do api call when the from rate changes.\n    getRates(rate);\n  };\n\n  const handleRateTo = (rate: string) => {\n    setSelectedRates(changeRateTo(ratesResponse, selectedRates, rate));\n  };\n\n  // Api call on the componentDidMount\n  useEffect(() => {\n    getRates(selectedRates.rateFrom);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (isError) {\n    return (\n      <h1\n        className=\"d-flex vh-100 justify-content-center align-items-center bg-dark text-light\"\n        data-testid=\"error-text\"\n      >\n        Something went wrong!\n      </h1>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <h1\n        className=\"d-flex vh-100 justify-content-center align-items-center bg-dark text-light\"\n        data-testid=\"loader-text\"\n      >\n        Loading...\n      </h1>\n    );\n  }\n  return (\n    <div\n      className=\"App d-flex vh-100 bg-dark align-items-center justify-content-center\"\n      data-testid=\"app-container\"\n    >\n      <CurrencyRow\n        testidPrefix=\"from\"\n        amount={selectedRates.amountFrom}\n        handleAmountChange={handleAmountFromChange}\n        rate={selectedRates.rateFrom}\n        rates={ratesResponse.rates}\n        distinctRate={selectedRates.rateTo}\n        handleRateClick={handleRateFrom}\n      />\n      <CurrencyRow\n        testidPrefix=\"to\"\n        amount={selectedRates.amountTo}\n        handleAmountChange={handleAmountToChange}\n        rates={ratesResponse.rates}\n        rate={selectedRates.rateTo}\n        distinctRate={selectedRates.rateFrom}\n        handleRateClick={handleRateTo}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","/* istanbul ignore file */\nimport { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* istanbul ignore file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Mock api responses are working on local.\nif (process.env.NODE_ENV === \"development\") {\n  const { worker } = require(\"./mocks/browser\");\n  worker.start();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}